name: Petmore Store - Produção

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:

      - name: Checkout repositório
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, gd, curl, zip, soap, bcmath, json

      - name: Check if composer.json exists
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: 'composer.json'

      - name: Configurar autenticação Magento no Composer
        run: |
          composer config -g http-basic.repo.magento.com "${{ secrets.MAGENTO_PUBLIC_KEY }}" "${{ secrets.MAGENTO_PRIVATE_KEY }}"

      - name: Run composer install if composer.json exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          composer validate --no-check-publish
          composer install --prefer-dist --no-progress --no-dev --optimize-autoloader

      # - name: Run composer update if composer.json exists
      #   if: steps.check_files.outputs.files_exists == 'true'
      #   run: composer update

      - name: Configurar acesso SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_PRIVATE_SSH_KEY }}

      - name: Testar conexão
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }} "echo ✅ Conectado com sucesso"

      - name: Criar path da aplicação e dar permissão
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }} << 'EOF'
          sudo mkdir -p ${{ vars.APP_COMPLETE_PATH }}/building
          sudo chown -R ${{ secrets.MAGALU_USER }}:${{ secrets.MAGALU_USER }} ${{ vars.APP_COMPLETE_PATH }}/building
          EOF

      - name: Copiar arquivos para VM
        run: |
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ \
            ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }}:${{ vars.APP_COMPLETE_PATH }}/building

      - name: Criar env.php com envsubst
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }} << 'EOF'
            export REMOTE_STORAGE_DRIVER=${{ secrets.REMOTE_STORAGE_DRIVER }}
            export BACKEND_FRONTNAME=${{ secrets.BACKEND_FRONTNAME }}
            export CACHE_GRAPHQL_ID_SALT=${{ secrets.CACHE_GRAPHQL_ID_SALT }}
            export CACHE_FRONTEND_DEFAULT_ID_PREFIX=${{ secrets.CACHE_FRONTEND_DEFAULT_ID_PREFIX }}
            export CACHE_PAGE_CACHE_ID_PREFIX=${{ secrets.CACHE_PAGE_CACHE_ID_PREFIX }}
            export CONNECTION_DEFAULT_HOST=${{ secrets.CONNECTION_DEFAULT_HOST }}
            export CONNECTION_DEFAULT_PORT=${{ secrets.CONNECTION_DEFAULT_PORT }}
            export CONNECTION_DEFAULT_DB_NAME=${{ secrets.CONNECTION_DEFAULT_DB_NAME }}
            export CONNECTION_DEFAULT_USERNAME=${{ secrets.CONNECTION_DEFAULT_USERNAME }}
            export CONNECTION_DEFAULT_PASSWORD=${{ secrets.CONNECTION_DEFAULT_PASSWORD }}

            export DOWNLOADABLE_DOMAINS=${{ vars.DOWNLOADABLE_DOMAINS }}
            export CATALOG_SEARCH_ENGINE=${{ secrets.CATALOG_SEARCH_ENGINE }}
            export CATALOG_SEARCH_SERVER_HOSTNAME=${{ secrets.CATALOG_SEARCH_SERVER_HOSTNAME }}
            export CATALOG_SEARCH_SERVER_PORT=${{ secrets.CATALOG_SEARCH_SERVER_PORT }}
            export CATALOG_SEARCH_INDEX_PREFIX=${{ secrets.CATALOG_SEARCH_INDEX_PREFIX }}
            export CATALOG_SEARCH_SERVER_TIMEOUT=${{ secrets.CATALOG_SEARCH_SERVER_TIMEOUT }}
            export WEB_DEFAULT_BASE_MEDIA_URL_UNSECURE=${{ vars.WEB_DEFAULT_BASE_MEDIA_URL_UNSECURE }}
            export WEB_DEFAULT_BASE_MEDIA_URL_SECURE=${{ vars.WEB_DEFAULT_BASE_MEDIA_URL_SECURE }}
            export REMOTE_STORAGE_CONFIG_PREFIX=${{ vars.REMOTE_STORAGE_CONFIG_PREFIX }}
            export CRYPT_KEY=${{ secrets.CRYPT_KEY }}

            export REMOTE_STORAGE_DRIVER=${{ secrets.REMOTE_STORAGE_DRIVER }}
            export REMOTE_STORAGE_CONFIG_BUCKET=${{ secrets.REMOTE_STORAGE_CONFIG_BUCKET }}
            export REMOTE_STORAGE_CONFIG_REGION=${{ secrets.REMOTE_STORAGE_CONFIG_REGION }}
            export REMOTE_STORAGE_CONFIG_USE_ENDPOINT=${{ secrets.REMOTE_STORAGE_CONFIG_USE_ENDPOINT }}
            export REMOTE_STORAGE_CONFIG_KEY=${{ secrets.REMOTE_STORAGE_CONFIG_KEY }}
            export REMOTE_STORAGE_CONFIG_BUCKET_PRIVATE=${{ secrets.REMOTE_STORAGE_CONFIG_BUCKET_PRIVATE }}
            export REMOTE_STORAGE_CONFIG_KEY_PRIVATE=${{ secrets.REMOTE_STORAGE_CONFIG_KEY_PRIVATE }}
            export REMOTE_STORAGE_CONFIG_SECRET_PRIVATE=${{ secrets.REMOTE_STORAGE_CONFIG_SECRET_PRIVATE }}
            export REMOTE_STORAGE_CONFIG_SECRET=${{ secrets.REMOTE_STORAGE_CONFIG_SECRET }}
            export REMOTE_STORAGE_CONFIG_ENDPOINT=${{ secrets.REMOTE_STORAGE_CONFIG_ENDPOINT }}
            export REMOTE_STORAGE_CONFIG_USE_PATH_STYLE=${{ secrets.REMOTE_STORAGE_CONFIG_USE_PATH_STYLE }}
            export REMOTE_STORAGE_CONFIG_USE_URL=${{ secrets.REMOTE_STORAGE_CONFIG_USE_URL }}
            export REMOTE_STORAGE_CONFIG_THROW=${{ secrets.REMOTE_STORAGE_CONFIG_THROW }}
            export REMOTE_STORAGE_CONFIG_HTTP_HTTP_CONNECT_TIMEOUT=${{ secrets.REMOTE_STORAGE_CONFIG_HTTP_HTTP_CONNECT_TIMEOUT }}
            export REMOTE_STORAGE_CONFIG_HTTP_TIMEOUT=${{ secrets.REMOTE_STORAGE_CONFIG_HTTP_TIMEOUT }}

            envsubst < ${{ vars.APP_COMPLETE_PATH }}/building/app/etc/env.php.template > ${{ vars.APP_COMPLETE_PATH }}/building/app/etc/env.php
          EOF

      - name: Configurar permissões iniciais
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }} << 'EOF'
            cd ${{ vars.APP_COMPLETE_PATH }}/building

            # Configurar permissões corretas
            sudo find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w {} +
            sudo find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} +
            sudo chmod u+x bin/magento
          EOF

      - name: Limpar cache e habilitar módulos
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=300 -o ServerAliveInterval=100 ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }} << 'EOF'
            cd ${{ vars.APP_COMPLETE_PATH }}/building

            # Limpar tudo antes de começar
            rm -rf var/cache/* var/page_cache/* generated/* var/view_preprocessed/* pub/static/*

            # Habilitar módulos
            bin/magento module:enable --all --clear-static-content

            # Setup upgrade
            php -d memory_limit=4G bin/magento setup:upgrade --keep-generated
          EOF

      - name: Compilar dependências
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=300 -o ServerAliveInterval=100 ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }} << 'EOF'
            cd ${{ vars.APP_COMPLETE_PATH }}/building

            # Compilar DI
            php -d memory_limit=4G bin/magento setup:di:compile
          EOF

      - name: Deploy completo de conteúdo estático - admin
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=300 -o ServerAliveInterval=100 ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }} << 'EOF'
            cd ${{ vars.APP_COMPLETE_PATH }}/building

            echo "=== DEPLOY PARA TODOS OS TEMAS ADMINHTML ==="
            # Deploy para adminhtml - vai compilar todos os temas admin automaticamente
            php -d memory_limit=4G bin/magento setup:static-content:deploy --area adminhtml --force --jobs=4

            echo "=== VERIFICAÇÃO DOS TEMAS COMPILADOS ==="
            echo "Temas Admin compilados:"
            ls -la pub/static/adminhtml/ 2>/dev/null || echo "Nenhum tema admin encontrado"

          EOF

      - name: Deploy completo de conteúdo estático - frontend
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=300 -o ServerAliveInterval=100 ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }} << 'EOF'
            cd ${{ vars.APP_COMPLETE_PATH }}/building

            echo "=== DEPLOY PARA TODOS OS TEMAS FRONTEND ==="
            # Deploy para frontend - vai compilar todos os temas frontend automaticamente
            php -d memory_limit=4G bin/magento setup:static-content:deploy --area frontend --force --jobs=4

            echo "Temas Frontend compilados:"
            ls -la pub/static/frontend/ 2>/dev/null || echo "Nenhum tema frontend encontrado"
          EOF

      - name: Configurar modo produção e finalizar
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=300 -o ServerAliveInterval=100 ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }} << 'EOF'
            cd ${{ vars.APP_COMPLETE_PATH }}/building

            # Mudar para modo produção
            php bin/magento deploy:mode:set production

            # Reindexar tudo
            php bin/magento indexer:reindex

            # Configurar cron jobs
            php bin/magento cron:install --non-optional

            # Limpar cache final
            php bin/magento cache:clean
            php bin/magento cache:flush

            # Verificar modo final
            echo "=== Modo final ==="
            php bin/magento deploy:mode:show

            # Verificar arquivos estáticos
            echo "=== Arquivos estáticos ==="
            if [ -f "pub/static/frontend/Magento/luma/en_US/mage/calendar.css" ]; then
                echo "✅ calendar.css gerado com sucesso!"
            else
                echo "❌ calendar.css NÃO foi gerado - tentando deploy específico..."
                # Tentar deploy específico se ainda não gerou
                php -d memory_limit=4G bin/magento setup:static-content:deploy en_US -t Magento/luma --force
            fi
          EOF

      - name: Corrigir permissões finais
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }} << 'EOF'
            cd ${{ vars.APP_COMPLETE_PATH }}/building

            # Permissões de produção
            sudo find . -type f -exec chmod 644 {} \;
            sudo find . -type d -exec chmod 755 {} \;
            sudo chmod 600 app/etc/env.php
            sudo chmod 600 app/etc/config.php

            # Proprietário correto
            sudo chown -R www-data:www-data .
          EOF

      - name: Verificação final
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }} << 'EOF'
            cd ${{ vars.APP_COMPLETE_PATH }}/building

            echo "=== VERIFICAÇÃO FINAL ==="
            echo "1. Modo:"
            php bin/magento deploy:mode:show

            echo "2. Arquivos estáticos:"
            find pub/static/frontend/Magento/luma/en_US -name "*.css" | head -5
            find pub/static/frontend/Magento/luma/en_US -name "*.js" | head -5

            echo "3. Calendar.css:"
            ls -la pub/static/frontend/Magento/luma/en_US/mage/calendar.css 2>/dev/null && echo "✅ EXISTE" || echo "❌ NÃO EXISTE"

          EOF

      - name: Movendo diretório para o path final
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.MAGALU_USER }}@${{ secrets.MAGALU_HOST }} << 'EOF'
            # Criar backup da versão atual
            sudo rm -rf ${{ vars.APP_COMPLETE_PATH }}/last-version
            [ -d "${{ vars.APP_COMPLETE_PATH }}/current" ] && sudo mv ${{ vars.APP_COMPLETE_PATH }}/current ${{ vars.APP_COMPLETE_PATH }}/last-version

            # Mover nova versão
            sudo mv ${{ vars.APP_COMPLETE_PATH }}/building ${{ vars.APP_COMPLETE_PATH }}/current

            echo "✅ Deploy concluído! Nova versão em produção."
          EOF
